{"version":3,"sources":["webpack://presentation-maps/webpack/universalModuleDefinition","webpack://presentation-maps/webpack/bootstrap","webpack://presentation-maps/external {\"commonjs\":\"presentation-decorator\",\"commonjs2\":\"presentation-decorator\",\"amd\":\"presentation-decorator\",\"root\":\"presentation-decorator\"}","webpack://presentation-maps/external {\"commonjs\":\"load-google-maps-api\",\"commonjs2\":\"load-google-maps-api\",\"amd\":\"load-google-maps-api\",\"root\":\"load-google-maps-api\"}","webpack://presentation-maps/./src/abstractMapView.js","webpack://presentation-maps/./src/index.js","webpack://presentation-maps/./src/heatMapView.js","webpack://presentation-maps/./src/functions/producePoints.js","webpack://presentation-maps/./src/mapView.js"],"names":["root","factory","exports","module","require","define","amd","this","__WEBPACK_EXTERNAL_MODULE__0__","__WEBPACK_EXTERNAL_MODULE__1__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","_presentationDecorator","_loadGoogleMapsApi","MAP_EL","DirectiveView","constructor","options","super","template","data","_data","apikey","_apikey","lat","_lat","long","_long","zoom","_zoom","geocode","_supportGeocoder","type","_type","_map_el","_markers","_loadGeocoder","_geocoder","_google","Geocoder","_produceMap","mapEl","document","getElementById","Error","map","Map","center","lng","mapTypeId","setMarker","icon","info","position","marker","Marker","push","infowindow","InfoWindow","content","addListener","open","clearMarkers","_marker","setMap","length","[object Object]","location","callback","_geocodeAddress","geocoder","resultsMap","address","async","results","status","setCenter","geometry","console","error","addMarkerPopup","markup","_removePopup","warn","google","event","clearListeners","remove","HeatMapView","MapView","AbstractMapView","dissipating","_dissipating","radius","_radius","render","_loadGoogleMapsApi2","default","libraries","then","Promise","resolve","produceHeatmap","catch","visualization","heatmap","points","_producePoints2","HeatmapLayer","Array","isArray","latlong","maps","LatLng","weight"],"mappings":"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","file":"presentation-maps.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"presentation-decorator\"), require(\"load-google-maps-api\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"presentation-maps\", [\"presentation-decorator\", \"load-google-maps-api\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"presentation-maps\"] = factory(require(\"presentation-decorator\"), require(\"load-google-maps-api\"));\n\telse\n\t\troot[\"presentation-maps\"] = factory(root[\"presentation-decorator\"], root[\"load-google-maps-api\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE__0__, __WEBPACK_EXTERNAL_MODULE__1__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/dist/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 3);\n","module.exports = __WEBPACK_EXTERNAL_MODULE__0__;","module.exports = __WEBPACK_EXTERNAL_MODULE__1__;","import { DirectiveView } from \"presentation-decorator\";\nimport loadGoogleMapsApi from \"load-google-maps-api\";\n\nconst MAP_EL = \"map\";\n\n/**\n * AbstractMapView - An abstract class\n * @param {Object} options Options to pass\n * @private\n * @extends DirectiveView\n */\nclass AbstractMapView extends DirectiveView {\n  constructor(options) {\n    if (!options) {\n      options = {};\n    }\n    super(options);\n    if (!this.template) {\n      this.template = \"\";\n    }\n\n    if (options.data) {\n      this._data = options.data;\n    } else {\n      this._data = [];\n    }\n\n    if (options.apikey) {\n      this._apikey = options.apikey;\n    } else {\n      this._apikey = \"\";\n    }\n\n    if (options.lat) {\n      this._lat = options.lat;\n    } else {\n      this._lat = 37.775;\n    }\n\n    if (options.long) {\n      this._long = options.long;\n    } else {\n      this._long = -122.434;\n    }\n\n    if (options.zoom) {\n      this._zoom = options.zoom;\n    } else {\n      this._zoom = 13;\n    }\n\n    if (options.geocode) {\n      this._supportGeocoder = true;\n    } else {\n      this._supportGeocoder = false;\n    }\n\n    if (options.type) {\n      this._type = options.type;\n    } else {\n      this._type = \"satellite\";\n    }\n\n    this._map_el = `${this.name}_${MAP_EL}`;\n\n    this.template += `\n      <div id=\"${this._map_el}\" class=\"map\"></div>\n    `;\n\n    this._markers = [];\n  };\n\n  _loadGeocoder() {\n    if (this._supportGeocoder) {\n      this._geocoder = new this._google.Geocoder();\n    }\n    return this._geocoder;\n  };\n\n  _produceMap() {\n    const mapEl = document.getElementById(this._map_el);\n    if (mapEl) {\n      this.map = new this._google.Map(mapEl, {\n        \"zoom\": this._zoom,\n        \"center\": {\n          \"lat\": this._lat,\n          \"lng\": this._long\n        },\n        \"mapTypeId\": this._type\n      });\n    } else {\n      throw new Error(\"No map el\");\n    }\n    return this.map;\n  };\n\n  /**\n   * Add a marker to the map\n   * @param {string} icon (optional) A location to an icon image\n   * @param {number} lat Latitude\n   * @param {number} long Longitude\n   * @param {number} info (optional) InfoWindow markup\n   */\n  setMarker(icon, lat, long, info) {\n    if (lat && long) {\n      const m = {\n        position: { lat: lat, lng: long },\n        map: this.map\n      };\n      if (icon) {\n        m.icon = icon;\n      }\n      const marker = new this._google.Marker(m);\n      this._markers.push(marker);\n      if (info) {\n        const infowindow = new this._google.InfoWindow({\n          content: info\n        });\n        if (marker) {\n          marker.addListener(\"click\", () => {\n            infowindow.open(this.map, marker);\n          });\n        }\n      }\n    }\n  };\n\n  /**\n   * Clears all markers on the map\n   */\n  clearMarkers() {\n    if (this._marker) {\n      this._marker.setMap(null);\n      this._marker = null;\n    }\n    if (this._markers) {\n      let i = 0;\n      const l = this._markers.length;\n      for(i; i < l; i++) {\n        this._markers[i].setMap(null);\n      }\n    }\n    return true;\n  };\n\n  /**\n   * geocode a location and update the map with a pin\n   * @param {string} location The location as a string\n   * @param {function} callback Opional callback once the call is complete and 'results' are passed\n   */\n  async geocode(location, callback) {\n    return await this._geocodeAddress(this._geocoder, this.map, location, callback);\n  };\n\n  async _geocodeAddress(geocoder, resultsMap, location, callback) {\n    return await geocoder.geocode({ \"address\": location }, async (results, status) => {\n      if (status === \"OK\") {\n        await resultsMap.setCenter(results[0].geometry.location);\n        if (this._marker) {\n          await this._marker.setMap(null);\n          this._marker = null;\n        }\n        this._marker = new this._google.Marker({\n          map: resultsMap,\n          position: results[0].geometry.location\n        });\n        if (callback) {\n          callback(results);\n        }\n      } else {\n        console.error(`Geocode was not successful for the following reason: ${status}`);\n      }\n    });\n  };\n\n  /**\n   * Add a marker popup window\n   * @param {string} markup Markup content for the popup\n   */\n  addMarkerPopup(markup) {\n    if (this._google) {\n      const infowindow = new this._google.InfoWindow({\n        content: markup\n      });\n      if (this._marker) {\n        this._removePopup();\n        this._marker.addListener(\"click\", () => {\n          infowindow.open(this.map, this._marker);\n        });\n      }\n    } else {\n      console.warn(\"Could not get the maps api instance to add marker details.\");\n    }\n    return true;\n  };\n\n  /**\n   * Return the marker (if one exists)\n   * @property marker\n   * @returns {Google.Maps.Marker} The map marker class\n   */\n  get marker() {\n    return this._marker;\n  };\n\n  /**\n   * Return the Google Map API instance (if one exists)\n   * @property google\n   * @returns {Google.Maps} The map api class\n   */\n  get google() {\n    return this._google;\n  };\n\n  /**\n   * Return the Google Map Geocoder instance (if one exists)\n   * @property geocoder\n   * @returns {Google.Maps.Geocoder} The geocoder class\n   */\n  get geocoder() {\n    return this._geocoder;\n  };\n\n  _removePopup() {\n    if (this._marker) {\n      this._google.event.clearListeners(this._marker, \"click\");\n    }\n    return true;\n  };\n\n  async remove() {\n    await this._removePopup();\n    return super.remove();\n  };\n};\n\nexport default AbstractMapView;\n","import HeatMapView from \"./heatMapView.js\";\nimport MapView from \"./mapView.js\";\n\nmodule.exports.HeatMapView = HeatMapView;\nmodule.exports.MapView = MapView;\n","import { DirectiveView } from \"presentation-decorator\";\nimport loadGoogleMapsApi from \"load-google-maps-api\";\nimport AbstractMapView from \"./abstractMapView.js\";\nimport producePoints from \"./functions/producePoints.js\";\n\n/**\n * HeatMapView - A Google Maps Heatmap View\n * @param {Object} options Options to pass\n * Requires the following options passed for meaningful results:\n * @example\n * class MyMapView extends HeatMapView {\n * constructor() {\n *   super({\n *       \"el\": MOUNT_POINT,\n *       \"template\": `any template you want`,\n *       \"name\": \"mapview\",\n *       \"style\": \"view\",\n *       \"lat\": 37.775,\n *       \"long\": -122.434,\n *       \"zoom\": 13,\n *       \"apikey\": MAP_API_KEY,\n *       \"data\": [{ \"lat\": 37, \"long\": -122, \"weight\": 1 }, ... ]\n *     });\n *   };\n * };\n * @extends DirectiveView\n */\nclass HeatMapView extends AbstractMapView {\n  constructor(options) {\n    if (!options) {\n      options = {};\n    }\n    super(options);\n    if (options.dissipating) {\n      this._dissipating = options.dissipating;\n    } else {\n      this._dissipating = false;\n    }\n\n    if (options.radius) {\n      this._radius = options.radius;\n    } else {\n      this._radius = 20;\n    }\n  };\n\n  /**\n   * @property {Google.Maps.Heatmap} heatmap The heatmap\n   */\n\n  /**\n   * Renders the Map\n   * @returns {View} returns 'this'\n   */\n  async render() {\n    await super.render();\n\n    await loadGoogleMapsApi({\n      \"key\": this._apikey,\n      \"libraries\": [\"visualization\"]\n    })\n    .then( (google) => {\n      if (!google) {\n        throw new Error(\"Could not load Google Maps API!\");\n      }\n      this._google = google;\n      this._loadGeocoder();\n      return Promise.resolve(google);\n    })\n    .then( (google) => {\n      this._produceMap();\n      return Promise.resolve(google);\n    })\n    .then( (google) => {\n      this.produceHeatmap();\n      return Promise.resolve(google);\n    })\n    .catch( (error) => {\n      console.error(error);\n    });\n    return this;\n  };\n\n  /**\n   * Produces the heatmap from point data\n   * @param {Array} data The data as an array of points in Lat/Long\n   * @example\n   * produceHeatmap([{ \"lat\": 37.7749, \"long\": -122.4194, \"weight\": 1 }, ... ]);\n   */\n  produceHeatmap(data) {\n    if (!this._google.visualization) {\n      console.warn(\"Google Visualization could not load!\");\n      return false;\n    }\n    if (this._google.visualization && (data || this._data)) {\n      if (this.heatmap) {\n        this.heatmap.setMap(null);\n      }\n      const points = producePoints(google, ((data) ? data : this._data));\n      if (points) {\n        this.heatmap = new this._google.visualization.HeatmapLayer({\n          \"data\": points,\n          \"map\": this.map,\n          \"dissipating\": this._dissipating,\n          \"radius\": this._radius\n        });\n        if (!this._data && data) {\n          this._data = data;\n        }\n      } else {\n        console.warn(\"Could not produce points for heatmap.\");\n      }\n    } else {\n      return false;\n    }\n    return true;\n  };\n};\n\nexport default HeatMapView;\n","const producePoints = (google, data) => {\n  const points = [];\n  if (!google) {\n    console.error(\"No Google API.\");\n  } else if (data && Array.isArray(data) && data.length > 0) {\n    let i = 0;\n    const l = data.length;\n    for (i; i < l; i++) {\n      if (data[i].lat && data[i].long) {\n        const latlong = new google.maps.LatLng(data[i].lat, data[i].long);\n        if (data[i].weight) {\n          points.push({ location: latlong, weight: data[i].weight });\n        } else {\n          points.push(latlong);\n        }\n      }\n    }\n  }\n  return points;\n};\n\nexport default producePoints;\n","import { DirectiveView } from \"presentation-decorator\";\nimport AbstractMapView from \"./abstractMapView.js\";\nimport loadGoogleMapsApi from \"load-google-maps-api\";\n\n/**\n * MapView - A Google Map View\n * @param {Object} options Options to pass\n * Requires the following options passed for meaningful results:\n * @example\n * class MyMapView extends MapView {\n * constructor() {\n *   super({\n *       \"el\": MOUNT_POINT,\n *       \"template\": `any template you want`,\n *       \"name\": \"mapview\",\n *       \"style\": \"view\",\n *       \"lat\": 37.775,\n *       \"long\": -122.434,\n *       \"zoom\": 13,\n *       \"apikey\": MAP_API_KEY,\n *       \"data\": [{ \"lat\": 37, \"long\": -122 }, ... ]\n *     });\n *   };\n * };\n * @extends DirectiveView\n */\nclass MapView extends AbstractMapView {\n  constructor(options) {\n    super(options);\n  };\n\n  /**\n   * Renders the Map\n   * @returns {View} returns 'this'\n   */\n   async render() {\n     await super.render();\n\n     await loadGoogleMapsApi({\n       \"key\": this._apikey\n     })\n     .then( (google) => {\n       if (!google) {\n         throw new Error(\"Could not load Google Maps API!\");\n       }\n       this._google = google;\n       this._loadGeocoder();\n       return Promise.resolve(google);\n     })\n     .then( (google) => {\n       this._produceMap();\n       return Promise.resolve(google);\n     })\n     .catch( (error) => {\n       console.error(error);\n     });\n     return this;\n   };\n};\n\nexport default MapView;\n"],"sourceRoot":""}