{"version":3,"sources":["webpack://presentation-maps/webpack/universalModuleDefinition","webpack://presentation-maps/webpack/bootstrap","webpack://presentation-maps/external {\"commonjs\":\"presentation-decorator\",\"commonjs2\":\"presentation-decorator\",\"amd\":\"presentation-decorator\",\"root\":\"presentation-decorator\"}","webpack://presentation-maps/external {\"commonjs\":\"load-google-maps-api\",\"commonjs2\":\"load-google-maps-api\",\"amd\":\"load-google-maps-api\",\"root\":\"load-google-maps-api\"}","webpack://presentation-maps/./src/abstractMapView.js","webpack://presentation-maps/./src/index.js","webpack://presentation-maps/./src/heatMapView.js","webpack://presentation-maps/./src/functions/producePoints.js","webpack://presentation-maps/./src/mapView.js"],"names":["root","factory","exports","module","require","define","amd","this","__WEBPACK_EXTERNAL_MODULE__0__","__WEBPACK_EXTERNAL_MODULE__1__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","AbstractMapView","DirectiveView","constructor","options","super","template","data","_data","apikey","_apikey","lat","_lat","long","_long","zoom","_zoom","geocode","_supportGeocoder","type","_type","_map_el","_markers","_loadGeocoder","_geocoder","_google","Geocoder","_produceMap","mapEl","document","getElementById","Error","map","Map","setMarker","icon","info","position","lng","marker","Marker","push","infowindow","InfoWindow","content","addListener","open","clearMarkers","_marker","setMap","length","location","callback","_geocodeAddress","geocoder","resultsMap","async","results","status","setCenter","geometry","console","error","addMarkerPopup","markup","_removePopup","warn","event","clearListeners","remove","HeatMapView","MapView","dissipating","_dissipating","radius","_radius","render","then","google","Promise","resolve","produceHeatmap","catch","visualization","heatmap","points","HeatmapLayer","Array","isArray","latlong","maps","LatLng","weight"],"mappings":"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","file":"presentation-maps.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"presentation-decorator\"), require(\"load-google-maps-api\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"presentation-maps\", [\"presentation-decorator\", \"load-google-maps-api\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"presentation-maps\"] = factory(require(\"presentation-decorator\"), require(\"load-google-maps-api\"));\n\telse\n\t\troot[\"presentation-maps\"] = factory(root[\"presentation-decorator\"], root[\"load-google-maps-api\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE__0__, __WEBPACK_EXTERNAL_MODULE__1__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/dist/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 3);\n","module.exports = __WEBPACK_EXTERNAL_MODULE__0__;","module.exports = __WEBPACK_EXTERNAL_MODULE__1__;","import { DirectiveView } from \"presentation-decorator\";\nimport loadGoogleMapsApi from \"load-google-maps-api\";\n\nconst MAP_EL = \"map\";\n\n/**\n * AbstractMapView - An abstract class\n * @param {Object} options Options to pass\n * @private\n * @extends DirectiveView\n */\nclass AbstractMapView extends DirectiveView {\n  constructor(options) {\n    if (!options) {\n      options = {};\n    }\n    super(options);\n    if (!this.template) {\n      this.template = \"\";\n    }\n\n    if (options.data) {\n      this._data = options.data;\n    } else {\n      this._data = [];\n    }\n\n    if (options.apikey) {\n      this._apikey = options.apikey;\n    } else {\n      this._apikey = \"\";\n    }\n\n    if (options.lat) {\n      this._lat = options.lat;\n    } else {\n      this._lat = 37.775;\n    }\n\n    if (options.long) {\n      this._long = options.long;\n    } else {\n      this._long = -122.434;\n    }\n\n    if (options.zoom) {\n      this._zoom = options.zoom;\n    } else {\n      this._zoom = 13;\n    }\n\n    if (options.geocode) {\n      this._supportGeocoder = true;\n    } else {\n      this._supportGeocoder = false;\n    }\n\n    if (options.type) {\n      this._type = options.type;\n    } else {\n      this._type = \"satellite\";\n    }\n\n    this._map_el = `${this.name}_${MAP_EL}`;\n\n    this.template += `\n      <div id=\"${this._map_el}\" class=\"map\"></div>\n    `;\n\n    this._markers = [];\n  };\n\n  _loadGeocoder() {\n    if (this._supportGeocoder) {\n      this._geocoder = new this._google.Geocoder();\n    }\n    return this._geocoder;\n  };\n\n  _produceMap() {\n    const mapEl = document.getElementById(this._map_el);\n    if (mapEl) {\n      this.map = new this._google.Map(mapEl, {\n        \"zoom\": this._zoom,\n        \"center\": {\n          \"lat\": this._lat,\n          \"lng\": this._long\n        },\n        \"mapTypeId\": this._type\n      });\n    } else {\n      throw new Error(\"No map el\");\n    }\n    return this.map;\n  };\n\n  /**\n   * Add a marker to the map\n   * @param {string} icon (optional) A location to an icon image\n   * @param {number} lat Latitude\n   * @param {number} long Longitude\n   * @param {number} info (optional) InfoWindow markup\n   */\n  setMarker(icon, lat, long, info) {\n    if (lat && long) {\n      const m = {\n        position: { lat: lat, lng: long },\n        map: this.map\n      };\n      if (icon) {\n        m.icon = icon;\n      }\n      const marker = new this._google.Marker(m);\n      this._markers.push(marker);\n      if (info) {\n        const infowindow = new this._google.InfoWindow({\n          content: info\n        });\n        if (marker) {\n          marker.addListener(\"click\", () => {\n            infowindow.open(this.map, marker);\n          });\n        }\n      }\n    }\n  };\n\n  /**\n   * Clears all markers on the map\n   */\n  clearMarkers() {\n    if (this._marker) {\n      this._marker.setMap(null);\n      this._marker = null;\n    }\n    if (this._markers) {\n      let i = 0;\n      const l = this._markers.length;\n      for(i; i < l; i++) {\n        this._markers[i].setMap(null);\n      }\n    }\n    return true;\n  };\n\n  /**\n   * geocode a location and update the map with a pin\n   * @param {string} location The location as a string\n   * @param {function} callback Opional callback once the call is complete and 'results' are passed\n   */\n  async geocode(location, callback) {\n    return await this._geocodeAddress(this._geocoder, this.map, location, callback);\n  };\n\n  async _geocodeAddress(geocoder, resultsMap, location, callback) {\n    return await geocoder.geocode({ \"address\": location }, async (results, status) => {\n      if (status === \"OK\") {\n        await resultsMap.setCenter(results[0].geometry.location);\n        if (this._marker) {\n          await this._marker.setMap(null);\n          this._marker = null;\n        }\n        this._marker = new this._google.Marker({\n          map: resultsMap,\n          position: results[0].geometry.location\n        });\n        if (callback) {\n          callback(results);\n        }\n      } else {\n        console.error(`Geocode was not successful for the following reason: ${status}`);\n      }\n    });\n  };\n\n  /**\n   * Add a marker popup window\n   * @param {string} markup Markup content for the popup\n   */\n  addMarkerPopup(markup) {\n    if (this._google) {\n      const infowindow = new this._google.InfoWindow({\n        content: markup\n      });\n      if (this._marker) {\n        this._removePopup();\n        this._marker.addListener(\"click\", () => {\n          infowindow.open(this.map, this._marker);\n        });\n      }\n    } else {\n      console.warn(\"Could not get the maps api instance to add marker details.\");\n    }\n    return true;\n  };\n\n  /**\n   * Return the marker (if one exists)\n   * @property marker\n   * @returns {Google.Maps.Marker} The map marker class\n   */\n  get marker() {\n    return this._marker;\n  };\n\n  /**\n   * Return the Google Map API instance (if one exists)\n   * @property google\n   * @returns {Google.Maps} The map api class\n   */\n  get google() {\n    return this._google;\n  };\n\n  /**\n   * Return the Google Map Geocoder instance (if one exists)\n   * @property geocoder\n   * @returns {Google.Maps.Geocoder} The geocoder class\n   */\n  get geocoder() {\n    return this._geocoder;\n  };\n\n  _removePopup() {\n    if (this._marker) {\n      this._google.event.clearListeners(this._marker, \"click\");\n    }\n    return true;\n  };\n\n  async remove() {\n    await this._removePopup();\n    return super.remove();\n  };\n};\n\nexport default AbstractMapView;\n","import HeatMapView from \"./heatMapView.js\";\nimport MapView from \"./mapView.js\";\n\nmodule.exports.HeatMapView = HeatMapView;\nmodule.exports.MapView = MapView;\n","import { DirectiveView } from \"presentation-decorator\";\nimport loadGoogleMapsApi from \"load-google-maps-api\";\nimport AbstractMapView from \"./abstractMapView.js\";\nimport producePoints from \"./functions/producePoints.js\";\n\n/**\n * HeatMapView - A Google Maps Heatmap View\n * @param {Object} options Options to pass\n * Requires the following options passed for meaningful results:\n * @example\n * class MyMapView extends HeatMapView {\n * constructor() {\n *   super({\n *       \"el\": MOUNT_POINT,\n *       \"template\": `any template you want`,\n *       \"name\": \"mapview\",\n *       \"style\": \"view\",\n *       \"lat\": 37.775,\n *       \"long\": -122.434,\n *       \"zoom\": 13,\n *       \"apikey\": MAP_API_KEY,\n *       \"data\": [{ \"lat\": 37, \"long\": -122, \"weight\": 1 }, ... ]\n *     });\n *   };\n * };\n * @extends DirectiveView\n */\nclass HeatMapView extends AbstractMapView {\n  constructor(options) {\n    if (!options) {\n      options = {};\n    }\n    super(options);\n    if (options.dissipating) {\n      this._dissipating = options.dissipating;\n    } else {\n      this._dissipating = false;\n    }\n\n    if (options.radius) {\n      this._radius = options.radius;\n    } else {\n      this._radius = 20;\n    }\n  };\n\n  /**\n   * @property {Google.Maps.Heatmap} heatmap The heatmap\n   */\n\n  /**\n   * Renders the Map\n   * @returns {View} returns 'this'\n   */\n  async render() {\n    await super.render();\n\n    await loadGoogleMapsApi({\n      \"key\": this._apikey,\n      \"libraries\": [\"visualization\"]\n    })\n    .then( (google) => {\n      if (!google) {\n        throw new Error(\"Could not load Google Maps API!\");\n      }\n      this._google = google;\n      this._loadGeocoder();\n      return Promise.resolve(google);\n    })\n    .then( (google) => {\n      this._produceMap();\n      return Promise.resolve(google);\n    })\n    .then( (google) => {\n      this.produceHeatmap();\n      return Promise.resolve(google);\n    })\n    .catch( (error) => {\n      console.error(error);\n    });\n    return this;\n  };\n\n  /**\n   * Produces the heatmap from point data\n   * @param {Array} data The data as an array of points in Lat/Long\n   * @example\n   * produceHeatmap([{ \"lat\": 37.7749, \"long\": -122.4194, \"weight\": 1 }, ... ]);\n   */\n  produceHeatmap(data) {\n    if (!this._google.visualization) {\n      console.warn(\"Google Visualization could not load!\");\n      return false;\n    }\n    if (this._google.visualization && (data || this._data)) {\n      if (this.heatmap) {\n        this.heatmap.setMap(null);\n      }\n      const points = producePoints(google, ((data) ? data : this._data));\n      if (points) {\n        this.heatmap = new this._google.visualization.HeatmapLayer({\n          \"data\": points,\n          \"map\": this.map,\n          \"dissipating\": this._dissipating,\n          \"radius\": this._radius\n        });\n        if (!this._data && data) {\n          this._data = data;\n        }\n      } else {\n        console.warn(\"Could not produce points for heatmap.\");\n      }\n    } else {\n      return false;\n    }\n    return true;\n  };\n};\n\nexport default HeatMapView;\n","const producePoints = (google, data) => {\n  const points = [];\n  if (!google) {\n    console.error(\"No Google API.\");\n  } else if (data && Array.isArray(data) && data.length > 0) {\n    let i = 0;\n    const l = data.length;\n    for (i; i < l; i++) {\n      if (data[i].lat && data[i].long) {\n        const latlong = new google.maps.LatLng(data[i].lat, data[i].long);\n        if (data[i].weight) {\n          points.push({ location: latlong, weight: data[i].weight });\n        } else {\n          points.push(latlong);\n        }\n      }\n    }\n  }\n  return points;\n};\n\nexport default producePoints;\n","import { DirectiveView } from \"presentation-decorator\";\nimport AbstractMapView from \"./abstractMapView.js\";\nimport loadGoogleMapsApi from \"load-google-maps-api\";\n\n/**\n * MapView - A Google Map View\n * @param {Object} options Options to pass\n * Requires the following options passed for meaningful results:\n * @example\n * class MyMapView extends MapView {\n * constructor() {\n *   super({\n *       \"el\": MOUNT_POINT,\n *       \"template\": `any template you want`,\n *       \"name\": \"mapview\",\n *       \"style\": \"view\",\n *       \"lat\": 37.775,\n *       \"long\": -122.434,\n *       \"zoom\": 13,\n *       \"apikey\": MAP_API_KEY,\n *       \"data\": [{ \"lat\": 37, \"long\": -122 }, ... ]\n *     });\n *   };\n * };\n * @extends DirectiveView\n */\nclass MapView extends AbstractMapView {\n  constructor(options) {\n    super(options);\n  };\n\n  /**\n   * Renders the Map\n   * @returns {View} returns 'this'\n   */\n   async render() {\n     await super.render();\n\n     await loadGoogleMapsApi({\n       \"key\": this._apikey\n     })\n     .then( (google) => {\n       if (!google) {\n         throw new Error(\"Could not load Google Maps API!\");\n       }\n       this._google = google;\n       this._loadGeocoder();\n       return Promise.resolve(google);\n     })\n     .then( (google) => {\n       this._produceMap();\n       return Promise.resolve(google);\n     })\n     .catch( (error) => {\n       console.error(error);\n     });\n     return this;\n   };\n};\n\nexport default MapView;\n"],"sourceRoot":""}